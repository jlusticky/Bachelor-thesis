========================================================
How to setup Contiki on AVR Raven with ATMega1284P guide
========================================================

1 - Preparation
===============
In this guide we assume the following equipment:

Hardware:
PC running Linux (any other Unix-like OS should also work, but the GNU software is needed)
AVR Raven with ATmega1284P - http://www.atmel.com/tools/RZRAVEN.aspx
AVR Dragon programer - JTAG connected to AVR Raven - http://www.atmel.com/tools/AVRDRAGON.aspx
USB A/B Cable for connecting PC with AVR Raven
OPTIONAL RZ USB stick for communication between PC and AVR Raven (you won't have fun without it) - http://www.atmel.com/tools/RZUSBSTICK.aspx
NOTE: Two AVR Raven devices and one RZ USB stick can be ordered as evaluation starter kit called RZ Raven - http://www.atmel.com/tools/RZRAVEN.aspx


----#--SETUP AVR Raven connection + Photos -> HTML


Software:
Contiki source code - version 2.5
	from http://sourceforge.net/projects/contiki/files/Contiki/Contiki%202.5/contiki-2.5.zip/download
	or after cloning git repository by issuing git checkout 2.5
Programmer (flasher) for AVR - avrdude - http://www.nongnu.org/avrdude/
Toolchaing for AVR - avr-libc, binutils-avr, gcc-avr
OPTIONAL debugger (GDB) and interface between AVR JTAG and GDB - gdb-avr, avarice - http://avarice.sourceforge.net/
+OPTIONALLY we can use DDD as a GDB frontend


If we want to interface with the hardware as non-root user, we need to configure udev.
Put the following line to file under /etc/udev/rules.d/99-avrdragon.rules

SUBSYSTEMS=="usb", ATTRS{idVendor}=="03eb", ATTRS{idProduct}=="2107", MODE="0666"

The idVendor and idProduct can be read from output of lsusb command when the hardware is connected.
The mode 0666 sets this device writable for all users.
The udev or a whole PC might need to be restarted to apply changes.


2 - Compiling and flashing
==========================
After everything from step 1 installed and connected we can navigate to a Contiki project and flash it to AVR Raven:
$ cd contiki/examples/hello-world
$ make TARGET=avr-raven savetarget  # select target platform and save our choice to Makefile.target file
$ make                              # this will compile the project for avr-raven platform

Now we have the hello-world project compiled for avr-raven target.

To see all avaliable target platforms issue the following command:
$ make targets


Next we need to upload our compiled project to AVR Raven.
Since we are using the AVR Dragon with JTAG, we need to inform the programmer about it.
Edit Makefile and append the following line at the bottom of file:

AVRDUDE_PROGRAMMER := -c dragon_jtag

This appends "-c dragon_jtag" parameter to avrdude programmer, so it knows we are using Dragon with JTAG connected to AVR Raven.
Now we can upload the file:
$ make hello-world.u                # upload compiled project to device using avrdude (this must be issued by root if udev was not configured as above)

After successful upload we should have a running hello-world project on AVR Raven device.


3 - Debugging
=============
For debugging we gdb-avr and avarice software. We can also use a DDD graphical frontend for debugging.
Avarice tool need a hex file from our project. The following will extract it:
$ make hello-world.hex              # extract a .hex file for flashing with other programmers and avarice

Next we lunch avarice which will also flash the project to hardware and create a port (1212) for connecting the GDB debugger.
avarice -g -j usb -P atmega1284p --erase --program --file hello-world.hex -B 1MHz  :1212

After then we start the GDB debugger with our compiled binary file.
$ avr-gdb hello-wolrd.avr-raven
target remote :1212                 # connect to 1212 port for communicating with the hardware, after then we can debug as usual
continue                            # run the program (we should set some brakepoints before)

If we want to use a DDD frontend we start the DDD with avr-gdb debugger:
$ ddd --debugger avr-gdb  hello-world.avr-raven
Now we can select brakepoints and debug as usual.


4 - Network communication
=========================

Assuming we have RZ USB stick and working hello-world project, we can setup a webserver-ipv6-raven project from Contiki examples.
Navigate to webserver-ipv6-raven project and compile it for AVR Raven hardware:
$ cd contiki/examples/webserver-ipv6-raven
$ make                             # no need to specify target as it is already specified to AVR Raven in this particular project
---OR---- $ make TARGET=avr-raven


NOTE: Some of the following commands must be issued by root or with sudo. We assume sudo is configured on the system.


----#--SETUP RZ USB stick connection + firmware + Photos -> HTML
Flash the RZ USB stick:
avrdude -u -p usb1287 -c jtagmkII -v -P usb -Uefuse:w:0xFF:m -Uhfuse:w:0x99:m -Ulfuse:w:0xE2:m -Ueeprom:w:ravenusbstick-eeprom.hex -Uravenusbstick.hex
---


Connect the RZ USB stick to PC and check if the network interface establishes.
$ ifconfig

We should see interface called usb0 and it should get automatically IPv6 link local address, i.e. fe80::0012:13ff:fe14:1516/64.
If not add it manually:
$ sudo ip -6 address add fe80::0012:13ff:fe14:1516/64 scope link dev usb0

Next we assign this interface IPv6 address and route for the whole subnet.
$ sudo ip -6 address add aaaa::1/64 dev usb0   # our PC becomes aaaa::1 IPv6 address
$ sudo ip -6 route add aaaa::/64 dev usb0      # traffic to aaaa::/64 network goes through usb0 (RZ USB stick) interface


Next thing is to setup Router Advertisement Daemon (radvd), so that the Contiki node connects correctly to our IPv6 network.
Insert this configuration to /etc/radvd.conf or any other configuration file radvd uses.

interface usb0
{
    AdvSendAdvert on;
    AdvLinkMTU 1280;
    AdvCurHopLimit 128;
    AdvReachableTime 360000;
    MinRtrAdvInterval 100;
    MaxRtrAdvInterval 150;
    AdvDefaultLifetime 200;
    prefix AAAA::/64
    {
        AdvOnLink on;
        AdvAutonomous on;
        AdvPreferredLifetime 4294967295; 
        AdvValidLifetime 4294967295; 
    };
};


Before starting radvd we must enable forwarding for IPv6:
$ sudo sysctl -w net.ipv6.conf.all.forwarding=1
Now we can start the radvd - this should be done in the same way as other daemons are started on your OS.
The path might be /etc/rc.d/radvd, /etc/init.d/radvd, /usr/local/etc/rc.d/radvd or any other helper script (service, systemctl, ...) might be used.
$ sudo /etc/init.d/radvd start

Now we have radvd running, we can use Wireshark to check if Router Advertisement packets are being sent on usb0 interface.


The last thing is flashing our compiled binary file to AVR Raven.
We need to do it manually because this project does not have the upload target:
$ avr-objcopy -R .eeprom -R .fuse -R .signature -O ihex webserver6-avr-raven.elf webserver6-avr-raven.flash
$ avr-objcopy -j .eeprom --set-section-flags=.eeprom="alloc,load" --change-section-lma .eeprom=0 -O ihex webserver6-avr-raven.elf webserver6-avr-raven.eeprom
$ avrdude -c dragon_jtag -P usb -p m1284p -Ueeprom:w:webserver6-avr-raven.eeprom -Uflash:w:webserver6-avr-raven.flash

---# /etc/avrdude.conf

Finally we can ping the AVR Raven and use the webserver running on it:
$ ping6 aaaa::0011:22ff:fe33:4455              # the actual IPv6 address can be determined from Wireshark or radvd output
$ wget http://[aaaa::0011:22ff:fe33:4455]      # or any other web browser


pomoci RZUSBSTICK (rzusbstick + contiki/example/ravenusbstick = jackdaw):
ve skupine dialout
screen /dev/ttyACM0



If you desire more information on working with AVR Raven please consult
Contiki wiki page for AVR Raven - http://www.sics.se/contiki/wiki/index.php/Avr_Raven
Contiki documentation that can be generated from source code or - http://www.sics.se/~adam/contiki/docs/

-- + Jackdaw + ravenusbstick example
http://www.sics.se/~adam/contiki/docs/a01829.html
http://www.sics.se/~adam/contiki/docs/a01828.html


